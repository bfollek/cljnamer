(ns cljnamer.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:english_words/english_words.dart" :as ew]
            ["dart:core" :as dart]
            [cljd.flutter :as f]))

(defonce app-state (atom {:current (.random ew/WordPair)
                          :debug false
                          :favorites #{}}))

(defn debug-print
  [msg]
  (when (:debug @app-state) (dart/print msg)))

(defn like-button
  [current favorites]
  (let [icon (if (favorites current) m/Icons.favorite m/Icons.favorite_border)]
    (m/ElevatedButton.icon
     .onPressed
    ;; Slick swap code from https://github.com/Tensegritics/ClojureDart/blob/main/samples/first_flutter_app_codelabs/src/sample/first_flutter_app_codelabs.cljd#L39C31-L39C31
     (fn []
       (swap! app-state update :favorites #((if (% current) disj conj) % current))
       (debug-print (str "Changed favorites to " (:favorites @app-state))))
     .icon (m/Icon icon)
     .label (m/Text "Like"))))

(def next-button
  (m/ElevatedButton
   .onPressed
   #(do
      (swap! app-state assoc :current (.random ew/WordPair))
      (debug-print (str "Changed current to " (:current @app-state))))
   .child
   (m/Text "Next")))

(defn big-card
  [^ew/WordPair pair]
  [pair]
  (f/widget
   :context ctx
   :let [theme (m/Theme.of ctx)
         display-medium (-> theme .-textTheme .-displayMedium)
         color-primary (-> theme .-colorScheme .-primary)
         color-good-on-primary (-> theme .-colorScheme .-onPrimary)
         style (.copyWith display-medium .color color-good-on-primary)]
   (m/Card
    .color color-primary
    .child
    (m/Padding
     .padding (m/EdgeInsets.all 20)
     .child   (m/Text (.-asLowerCase pair)
                      .style style
                      .semanticsLabel (str (.-first pair) (.-second pair)))))))

(defn generator-page
  [current favorites]
  (m/Center
   .child
   (m/Column
    .mainAxisAlignment m/MainAxisAlignment.center
    .children [(big-card current)
               (m/SizedBox .height 10)
               (m/Row
                .mainAxisSize m/MainAxisSize.min
                .children
                [(like-button current favorites)
                 (m/SizedBox .width 10)
                 next-button])])))

(defn list-favorite
  [favorite color]
  (m/ListTile
   .leading (m/Icon m/Icons.favorite)
   .title (m/Text (.-asLowerCase ^ew/WordPair favorite)
                  .style (m/TextStyle .color color))))

(defn favorites-page [favorites]
  (f/widget
   :context ctx
   :let [cnt (count favorites)
         theme (m/Theme.of ctx)
         color-primary (-> theme .-colorScheme .-primary)]
   (if (= cnt 0)
     (m/Center
      .child
      (m/Text "No favorites yet."
              .style (m/TextStyle .color color-primary)))
     (m/Center
      .child
      (m/ListView
       .children
       (into [(m/Padding .padding (m/EdgeInsets.all 20))
              (m/Text (str "You have " cnt " favorite" (if (= cnt 1) "" "s") ":")
                      .style (m/TextStyle .color color-primary))]
             (map #(list-favorite % color-primary)
                  (sort-by #(.-asLowerCase ^ew/WordPair %) favorites))))))))

(defonce home-page-state (atom {:selected-index 0}))
(def home-page
  (f/widget
   :watch [{:keys [current favorites]} app-state]
   :watch [{:keys [selected-index]} home-page-state]
   :context ctx
   :let [theme (m/Theme.of ctx)
         color-container (-> theme .-colorScheme .-primaryContainer)
         page (case selected-index
                0 (generator-page current favorites)
                1 (favorites-page favorites)
                (throw (dart/UnimplementedError "no widget for selected-index")))]
   (m/LayoutBuilder
    .builder (fn [_context constraints]
               (m/Scaffold
                .body
                (m/Row
                 .children
                 [(m/SafeArea
                   .child (m/NavigationRail
                           .extended
                           (>= (.-maxWidth ^m/BoxConstraints constraints) 600)
                           .selectedIndex
                           selected-index
                           .onDestinationSelected
                           #(do
                              (swap! home-page-state assoc :selected-index %)
                              (debug-print (str "selected " %)))
                           .destinations
                           [(m/NavigationRailDestination
                             .icon (m/Icon m/Icons.home)
                             .label (m/Text "Home"))
                            (m/NavigationRailDestination
                             .icon (m/Icon m/Icons.favorite)
                             .label (m/Text "Favorites"))]))
                  (m/Expanded
                   .child
                   (m/Container
                    .color color-container,
                    .child page))]))))))

(defn main []
  (f/run
   :let [app
         (m/MaterialApp
          .title "ClojureDart Namer App"
          .theme (m/ThemeData
                  .useMaterial3 true
                  .colorScheme (m/ColorScheme.fromSeed .seedColor m/Colors.deepOrange))
          .home home-page)]
   (do
     (swap! app-state assoc :debug (.-debugShowCheckedModeBanner app))
     (dart/print (str "debug is " (:debug @app-state) "."))
     app)))
